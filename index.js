const {connectToDb} = require('./init_db')
const User = require('./models/User')
const options = require('./options')
const {bot} = require('./bot')
const {createCar, savePhone, saveAdress, downloadInfo} = require('./functions')
const validators = require('./validators.js')
const callbacks = require('./callbacks')
const {validationFullname} = require("./validators");
const helpers = require("./helpers");
require('dotenv').config()


connectToDb()

bot.setMyCommands([
    {command: '/start', description: '–ü–æ—á–∞—Ç–æ–∫'},
    {command: '/download', description: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏'}
])

bot.on('message', async (msg) => {
        const msgText = msg.text
        const chatId = msg.chat.id;
        const isExist = await User.exists({chat_id: chatId})
        let user = isExist ? await User.findOne({chat_id: chatId}).populate('cars').lean().exec() : null

        try {
            if (msgText === '/download') {
                return downloadInfo(chatId)
            }
            if (msgText === '/start') {
                if (!isExist) return bot.sendMessage(chatId, "–ú—ã –∫–æ–º–∞–Ω–¥–∞ –°–≤–æ—ó(https://svoi.space) , –ª–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ —É –Ω–∞—à–µ —Å–ø—ñ–≤—Ç–æ–≤–∞—Ä–∏—Å—Ç–≤–æ ,—è–∫—â–æ  —Ö–æ—á–µ—Ç–µ <b>–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</b> - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É", options.enter);
            }
            if (msgText === '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è') {
                if (!isExist) {
                    const newUser = new User({chat_id: chatId})
                    await newUser.save()
                    return bot.sendMessage(chatId, `\n–î—è–∫—É—î–º–æ –∑–∞ –±–∞–∂–∞–Ω–Ω—è –¥–æ—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –Ω–∞—Åüôè\n–î–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å\n<b>–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º‚Äô—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ</b>`, {parse_mode: "HTML"});
                }
            }
            if (!isExist) return bot.sendMessage(chatId, `–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ <b>–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è</b> - –Ω–∞—Ç–∏—Å–Ω–∏—Ç—å –∫–Ω–æ–ø–∫—É `, options.enter);

            if (msgText === '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è') {
                if (user.done) {
                    const n = JSON.parse(options.settings_menu.reply_markup)
                    n.keyboard[2].push(user.status ? {text: "–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"} : {text: "–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å"})
                    const opt = JSON.parse(JSON.stringify(options.settings_menu))
                    opt.reply_markup = n
                    return bot.sendMessage(chatId, `–û–±–µ—Ä—ñ—Ç—å,—è–∫—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è  —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏`, opt)
                }
            }
            if (msgText === `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É`) {
                if (user.done) {
                    const phone = user.tel_number
                    await User.updateOne({chat_id: chatId}, {tel_number: null})
                    return bot.sendMessage(chatId, `\n–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:<b>${phone}</b>\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä  –∞–±–æ –ø–æ–¥—ñ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–ºüìû`, options.shareContact)

                }
            }
            if (msgText === '–ì—Ä–∞—Ñ—ñ–∫') {
                if (user.done) {
                    await User.updateOne({chat_id: chatId}, {schedule: null})
                    return bot.sendMessage(chatId, `–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –≤–∞—Å –≥—Ä–∞—Ñ—ñ–∫üïí`, options.schedule)
                }
            }
            if (msgText === '–î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ') {
                if (user.done) {
                    await User.updateOne({chat_id: chatId}, {cars_approved: null})
                    let str = "–í–∞—à—ñ –∞–≤—Ç–æ:"
                    user.cars.forEach((car, i) => {
                        str += `\n<b>${i + 1} ${car.model}</b>`
                    })
                    await bot.sendMessage(chatId, `${str}`, {parse_mode: "HTML"})
                    const optRemove = {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    };
                    return bot.sendMessage(msg.chat.id, `\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ,—è–∫–µ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏`, optRemove);

                }
            }
            if (msgText === '–í–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ') {
                const inline_keyboard = []
                user.cars.forEach((car, i) => {
                    inline_keyboard.push([{text: `${car.model}`, callback_data: `deleteCar_${car._id}`}])
                })
                inline_keyboard.push([{text: "üëà–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data: `backToMenu`}])

                const opt = {
                    parse_mode: "HTML",
                    reply_markup: JSON.stringify({inline_keyboard})
                }
                return bot.sendMessage(chatId, `–û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ,—è–∫–µ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏‚ùå`, opt)

            }
            if (msgText === '–†–∞–π–æ–Ω –ø–æ—à—É–∫—É') {
                if (user.done) {
                    await User.updateOne({chat_id: chatId}, {radius: {done: false, regions: []}})
                    const inline_keyboard = []
                    for (let key in helpers.regions) {
                        const text = `${user.radius.regions.find(region => region === key) ? "‚úÖ" : "‚ûñ"} ${helpers.regions[key]}`
                        inline_keyboard.push([{text, callback_data: `setRegion_${key}`}])
                    }
                    inline_keyboard.push([{text: '–î–∞–ªi', callback_data: `setRegion_continue`}])
                    const opt = {parse_mode: "HTML"}
                    opt.reply_markup = JSON.stringify({inline_keyboard})
                    return bot.sendMessage(chatId, `\n–î–µ –≤–∏ –≥–æ—Ç–æ–≤—ñ —ó–∑–¥–∏—Ç–∏‚ùì`, opt)
                }
            }
            if (msgText === '–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å' || msgText === '–î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å') {
                if(user.done){
                    if(user.status) await User.updateOne({chat_id : chatId} , {status : false})
                    else  await User.updateOne({chat_id : chatId} , {status : true})
                    bot.sendMessage(chatId , `–í–∞—à —Å—Ç–∞—Ç—É—Å –±—É–≤ –∑–º—ñ–Ω–µ–Ω–∏–π –Ω–∞ <b>${user.status ? '–∞–∫—Ç–∏–≤–Ω–∏–πüöÄ' : '–Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–πüò¥'}</b>`,options.settings)
                }

            }


            if (isExist && !user.name) {
                if (!validationFullname(msgText)) return bot.sendMessage(chatId, `–ë—É–¥—å –ª–∞—Å–∫–∞ , –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω—É —Ñ–∞–º—ñ–ª—ñ—é, –∏–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ`)

                const name = msgText.trim().split(" ").map(word => word[0].toUpperCase() + word.slice(1)).join(" ")
                await User.updateOne({chat_id: chatId}, {name});
                return bot.sendMessage(chatId, `–î–æ–±—Ä–µ <b>${name}</b>,–≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—Éüöó`, {parse_mode: "HTML"})
            }

            if (!user.cars_approved) {
                if (!user.cars.length) return createCar(msgText, chatId)

                const carWithoutSB = user.cars.find(car => (car.type === '–õ–µ–≥–∫–æ–≤–∏–π' || car.type === '–ê–≤—Ç–æ–±—É—Å') && !car.subtype)

                if (carWithoutSB) {
                    return bot.deleteMessage(chatId, msg.message_id)
                }

                const carryingCheck = user.cars.find(car => !car.carrying)
                if (carryingCheck) {
                    return bot.deleteMessage(chatId, msg.message_id)
                }
                return createCar(msgText, chatId)
            }

            if (!user.tel_number) {
                if (msg.contact || validators.validatePhoneNumber(msgText)) return savePhone(msg.contact ? msg.contact.phone_number : msgText, chatId)
                else {
                    const str = "‚õî–ù–µ –≤i—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, –≤i–¥–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É —Ñ–æ—Ä–º–∞—Çi: <b>+380xxxxxxxxx</b>\n–ê–±–æ –ø–æ–¥i–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–ºüìû"
                    return bot.sendMessage(chatId, str, options.shareContact);
                }
            }
            if (!user.radius.done) {
                return bot.deleteMessage(chatId, msg.message_id)
            }

            if (!user.schedule) {
                return bot.deleteMessage(chatId, msg.message_id)
            }

            if (!user.district) {
                return bot.deleteMessage(chatId, msg.message_id)
            }

            if (!user.microdistrict) {
                return bot.deleteMessage(chatId, msg.message_id)
            }

            if (!user.adress) {
                return saveAdress(msgText, chatId)
            }

            if (user.certification == null) {
                return bot.deleteMessage(chatId, msg.message_id)
            }
            return bot.sendMessage(chatId, `<b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>`, options.settings)
        } catch
            (err) {
            console.log(err)
        }
    }
)
;


bot.on('callback_query', async function (msg) {
    const chatId = msg.message.chat.id;

    const entry = msg.data.split("_")[0]
    const func = callbacks[entry]
    await func(msg, chatId)

});
