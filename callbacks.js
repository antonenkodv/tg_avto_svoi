const {bot} = require("./bot");
const options = require("./options");
const Car = require('./models/Car')
const User = require('./models/User')
const helpers = require("./helpers");


async function finishAddingCars(msg, chatId) {
    try {
        await User.updateOne({chat_id: chatId}, {cars_approved: true})
        bot.deleteMessage(chatId, msg.message.message_id)
        return bot.sendMessage(chatId, `–ë—É–¥—å –ª–∞—Å–∫–∞ ,–ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–ºüìû`, options.shareContact)
    } catch (err) {
        console.log(err)
    }
}

async function addAuto(msg, chatId) {
    try {
        const user = await User.findOne({chat_id: chatId}).populate('cars').lean().exec()
        ids = user.cars.map(car => car._id)
        let cars = await Car.find().in("_id", [...ids])
        let str = ""
        cars.forEach((car, index) => str += `\n${index + 1}. ${car.model}`)
        bot.deleteMessage(chatId, msg.message.message_id)//—É–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return bot.sendMessage(chatId, `\n–í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏:<b>${str}</b>\nB–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—à–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—É`, {parse_mode: "HTML"})

    } catch (err) {
        console.log(err)
    }
}

async function setSubtype(msg, chatId) {
    try {
        const id = msg.data.split("_")[1]
        const subtype = msg.data.split("_")[2]
        const car = await Car.findOne({'_id': `${id}`}).lean().exec()
        if (!car.subtype) {
            await Car.updateOne({'_id': id}, {subtype: subtype})
            const opt = {
                parse_mode: "HTML",
                reply_markup: options.carryingCategories.reply_markup,
                chat_id: chatId,
                message_id: msg.message.message_id,
            }
            return bot.editMessageText(`\n–í–∫–∞–∂i—Ç—å –≤–∞–Ω—Ç–∞–∂–æ–ø—ñ–¥–π–æ–º–Ω—ñ—Å—Ç—å`, opt);
        } else {

        }
    } catch (err) {
        console.log(err)
    }
}

async function setCarrying(msg, chatId) {
    try {
        const categories = {
            "A": "–¥–æ 1000",
            "B": "–æ—Ç 1000 –¥–æ 3000",
            "C": "–æ—Ç 3000 –¥–æ 5000",
            "D": "—Å–≤—ã—à–µ 5000"
        }
        const carryCategory = msg.data.split("_")[1]
        const user = await User.findOne({chat_id: chatId}).populate('cars').lean().exec()
        const car = user.cars.find(car => !car.carrying)
        if (car) {
            await Car.updateOne({"_id": car._id}, {carrying: categories[carryCategory]})
            const opt = {
                parse_mode: "HTML",
                reply_markup: options.addAuto.reply_markup,
                chat_id: chatId,
                message_id: msg.message.message_id,
            }
            const {  model } = car
            const str = `\n–í–∞—à —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b> ${model}</b> –±—É–ª–æ —É—Å–øi—à–Ω–æ –¥–æ–¥–∞–Ω–æ‚úÖ\n–ß–∏ —ç —É –≤–∞—Å i–Ω—ài –∞–≤—Ç–æ‚ùì`
            return bot.editMessageText(str, opt);
        } else {

        }
    } catch (err) {
        console.log(err)
    }
}

async function setRegion(msg, chatId) {
    try {
        const region = msg.data.split("_")[1]
        const user = await User.findOne({chat_id: chatId}).populate('cars').lean().exec()
        const choosedRegions = user.radius.regions
        const idx = choosedRegions.findIndex(item => item === helpers.regions[region])
        let updated = []
        let opt = new Object()

        if (region === 'continue') {
            if (!choosedRegions.length) {
                return bot.sendMessage(chatId, `<b>–ë—É–¥—å –ª–∞—Å–∫–∞,–æ–±–µ—Äi—Ç—å —Ä–∞–π–æ–Ω</b>`, {parse_mode: "HTML"})
            }
            await User.updateOne({chat_id: chatId}, {radius: {regions: choosedRegions, done: true}})
            opt = {
                parse_mode: "HTML",
                reply_markup: options.schedule.reply_markup,
            }
            bot.deleteMessage(chatId, msg.message.message_id)
            return bot.sendMessage(chatId, `–ö–æ–ª–∏ –≤–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –Ω–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏?üïí\n\n–©–æ–¥–Ω—è —á–∏ –ª–∏—à–µ –≤ —Å–µ—Ä–µ–¥—É –∑ 12 –¥–æ 17?`, opt)
        }
        if (!choosedRegions.length) {
            updated.push(helpers.regions[region])
        } else {
            if (idx >= 0) {
                choosedRegions.splice(idx, 1)
                updated = choosedRegions
            }
            if (idx === -1) {
                updated = [...choosedRegions, helpers.regions[region]]
            }
        }

        await User.updateOne({chat_id: chatId}, {radius: {regions: updated, done: false}})
        const inline_keyboard = []
        for (let key in helpers.regions) {
            const text = `${updated.find(item => item === helpers.regions[key] && item !== 'continue') ? "‚úÖ" : "‚ûñ"} ${helpers.regions[key]}`
            inline_keyboard.push([{text, callback_data: `setRegion_${key}`}])
        }
        inline_keyboard.push([{text: '–î–∞–ªi', callback_data: `setRegion_continue`}])
        opt = {
            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard}),
            chat_id: chatId,
            message_id: msg.message.message_id
        }

        return bot.editMessageText(`\n–î–µ –≤–∏ –≥–æ—Ç–æ–≤—ñ —ó–∑–¥–∏—Ç–∏‚ùì`, opt)
    } catch (err) {
        console.log(err)
    }
}

async function setSchedule(msg, chatId) {
    try {
        let schedule = msg.data.split("_")[1]
        schedule = schedule === "everyday" ? "–ö–æ–∂–Ω–∏–π –¥–µ–Ω—å" :
            schedule === "wednesday" && "–©–æ —Å–µ—Ä–µ–¥–∏ 12-17"

        await User.updateOne({chat_id: chatId}, {schedule})
        const inline_keyboard = []
        for (let [key, value] of Object.entries(helpers.districts)) {
            inline_keyboard.push([{text: value, callback_data: `setDistrict_${key}`}])
        }
        const opt = {
            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard}),
            chat_id: chatId,
            message_id: msg.message.message_id
        }

        return bot.editMessageText(`–î–µ –≤–∏ –º–µ—à–∫–∞—î—Ç–µ‚ùì`, opt)
    } catch (err) {
        console.log(err)
    }
}

async function setDistrict(msg, chatId) {
    try {

        const category = msg.data.split("_")[1]
        await User.updateOne({chat_id: chatId}, {district: helpers.districts[category]})
        const microDistricts = helpers.microdistrics[category]
        const inline_keyboard = []
        for (let [i, value] of microDistricts.entries()) {
            inline_keyboard.push([{text: value, callback_data: `setMicroDistrict_${category}_${i}`}])
        }
        inline_keyboard.push([{text: 'I–Ω—à–µ', callback_data: `setMicroDistrict_I–Ω—à–µ`}])
        const opt = {
            parse_mode: "HTML",
            reply_markup: JSON.stringify({inline_keyboard}),
            chat_id: chatId,
            message_id: msg.message.message_id
        }

        return bot.editMessageText(`–û–±–µ—Äi—Ç—å –ºi–∫—Ä–æ—Ä–∞–π–æ–Ωüìç`, opt)
    } catch (err) {
        console.log(err)
    }
}

async function setMicroDistrict(msg, chatId) {
    try {
        const category = msg.data.split("_")[1]
        if (category === 'I–Ω—à–µ') await User.updateOne({chat_id: chatId}, {microdistrict: category})
        else {
            const index = msg.data.split("_")[2]
            const micro = helpers.microdistrics[category][index]
            await User.updateOne({chat_id: chatId}, {microdistrict: micro})
        }

        bot.deleteMessage(chatId, msg.message.message_id)
        return bot.sendMessage(chatId, `<b>–Ø–∫—â–æ –Ω–µ –≤–∞–∂–∫–æ, —Ç–æ –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É</b>üè†`, {parse_mode: "HTML"})
    } catch (err) {
        console.log(err)
    }
}

async function setCertification(msg, chatId) {
    try {
        const isVolunteer = msg.data.split("_")[1]
        if (isVolunteer === 'yes') await User.updateOne({chat_id: chatId}, {certification: "Yes", status: true})
        else await User.updateOne({chat_id: chatId}, {certification: "No", status: true})
        bot.deleteMessage(chatId, msg.message.message_id)
        return bot.sendMessage(chatId, `<b>–î—è–∫—É—î–º–æ, –≤–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é</b>üëèüëå`, options.settings)
    } catch (err) {
        console.log(err)
    }
}

module.exports = {
    addAuto,
    finishAddingCars,
    setSubtype,
    setCarrying,
    setRegion,
    setSchedule,
    setDistrict,
    setMicroDistrict,
    setCertification
}

